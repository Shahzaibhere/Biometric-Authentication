/*
 * GccApplication32.c
 *
 * Created: 5/7/2019 8:17:21 PM
 * Author : SSW 
 */ 

//This project was undertaken by Shahzaib S. Warraich for the course EE222 in spring'19
//Runtime configurable Biometric Authentication

#define F_CPU 1000000UL // sets the CPU freq. to 1MHz as per requirement
#include <avr/io.h> // includes the IO library of the AVR
#include <util/delay.h> // includes the delay library
#include <avr/interrupt.h> // includes the interrupt library of the AVR
#include <string.h> // includes the string library to be able to perform string manipulation
#include <stdio.h> // To import I/O library of C

//LCD connections in 8 bit mode
#define LCD_DDDR DDRA
#define LCD_DPORT PORTA
#define LCD_DPIN PINA
#define LCD_CDDR DDRD
#define LCD_CPORT PORTD
#define LCD_CPIN PIND
#define LCD_RS  7
#define LCD_RW  6
#define LCD_EN  5

//Key interface
//#define Key1	PB0  //ADD FINGER IMPRESSION
//#define Key2	PB1  //ERASE ALL TEMPLATES FROM FLASH

//LCD function prototypes
void LCD_Command(unsigned char command);
void LCD_Data(unsigned char data);
void LCD_Initialise(void);
void cleardisplay(void);
void go_to_xy(unsigned char x, unsigned char y);
void LCD_print(unsigned char *string);

//USART function prototypes
void USART_Transmit(char data);
void USART_Init();
int USART_Receive();

//r307 module's function prototypes
void AddFinger(void);
void EraseFlashMemory(void);
//void Menu(void);
int AddFinger1(void);
int AddFinger2(void);
void make_template(void);
void AddfingerAuthentication(void);
void store(void);
void external_interrupts_init(void);

//Global variables
int ID=0; //variable according to template number


void LCD_Command(unsigned char command) // set up
{
	LCD_DPORT= command;
	LCD_CPORT &= ~(1<<LCD_RS);
	LCD_CPORT &= ~(1<<LCD_RW);
	LCD_CPORT |= (1<<LCD_EN);
	_delay_ms(1);
	LCD_CPORT &= ~(1<<LCD_EN);
	_delay_ms(100);
	
}
void LCD_Data(unsigned char data) // set up
{
	LCD_DPORT= data;
	LCD_CPORT |= (1<<LCD_RS);
	LCD_CPORT &= ~(1<<LCD_RW);
	LCD_CPORT |= (1<<LCD_EN);
	_delay_ms(1);
	LCD_CPORT &= ~(1<<LCD_EN);
	_delay_ms(100);
	
}

void LCD_Initialise(void) // set up
{
	LCD_DDDR=0xFF;
	LCD_CDDR=0xFF;
	LCD_CPORT &= ~(1<<LCD_EN);
	_delay_ms(2000);
	LCD_Command(0x38);
	LCD_Command(0x0E);
	LCD_Command(0x01);
	_delay_ms(2000);
	LCD_Command(0x06);
}
void cleardisplay(void) //clears display
{
	LCD_Command(0x01);
	_delay_ms(100);
}


void go_to_xy(unsigned char x, unsigned char y) // goes to coordinates
{
	unsigned char first_address[]={0x80,0xC0};
	LCD_Command(first_address[y-1]+ x-1);
	_delay_ms(100);
}

void LCD_print(unsigned char *string) // prints the text upon call
{
	unsigned char i=0;
	for (i=0;string[i]!=0; i++)
	{
		LCD_Data(string[i]);
	}
	
}
//USART function definitions

void USART_Init() //initializes the USART in accordance to the requirements
{
	/* Sets baud rate */
	UBRRH = 0x00;
	UBRRL = 0x07; //baud rate 57600 at 8 MHz as per r307's requirements
	//Set double speed
	//UCSRA |= (1<<U2X);
	/* Enables receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
	/* Sets frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
	//Set interrupt on RX
	UCSRB |= (1<<RXCIE);
	
}
int USART_Receive() // receives data from the buffer upon availability
{
	
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
	/* Get and return received data from buffer */
	return UDR;
}
void USART_Transmit(char data) // transmits data to the buffer upon its availability
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<UDRE)) );
	/* Get and return received data from buffer */
	UDR=data;
}


// r307 module's function definitions

void AddFinger() // adds impression to flash upon authentication
{
	go_to_xy(1,1);
	LCD_print("Place your");
	go_to_xy(1,2);
	LCD_print("finger");
	_delay_ms(5000);
	cleardisplay();
	while(1)
	{
		if(AddFinger1()==1) // exits after successful reading of 1st character buffer
		{
			break;
		}
	}
	
	go_to_xy(1,1);
	LCD_print(" Success ");
	
	_delay_ms(5000);
	cleardisplay();
	go_to_xy(1,1);
	LCD_print("Place your");
	go_to_xy(1,2);
	LCD_print("finger again");
	_delay_ms(5000);
	cleardisplay();
	while(1)
	{
		if(AddFinger2()==1)// exits after successful reading of 1st character buffer
		{
			break;
		}
	}
	cleardisplay();
	go_to_xy(1,1);
	LCD_print(" Success ");
	
	make_template(); // creates template from the two character buffers
	AddfingerAuthentication(); // stores upon verification
	

}


int AddFinger1() // character buffer 1 set up
{
	int i=0;
	char insignal=1,verification=1;
	USART_Transmit(0xEF);   //packet header
	USART_Transmit(0x01);
	USART_Transmit(0xFF);   //packet adder
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0x01);	//command packet
	USART_Transmit(0x00);   //length
	USART_Transmit(0x03);

	USART_Transmit(0x01);	//Add Finger
	USART_Transmit(0x00);   //verification sum
	USART_Transmit(0x05);
	for (i=0;i<10;i++) // verifications the confirmation byte
	{
		verification= USART_Receive();
		if(i==9)

		{

			verification=insignal;

			insignal=USART_Receive();

			insignal=USART_Receive();

			if(verification==0x00)

			{

				
				insignal=1;
			}

			USART_Transmit(0xEF);   //packet header
			USART_Transmit(0x01);
			USART_Transmit(0xFF);   //packet adder
			USART_Transmit(0xFF);
			USART_Transmit(0xFF);
			USART_Transmit(0xFF);
			USART_Transmit(0x01);	//command packet
			USART_Transmit(0x00);   //length
			USART_Transmit(0x04);
			USART_Transmit(0x02);
			USART_Transmit(0x01);
			USART_Transmit(0x00); // verification sum
			USART_Transmit(0x08);

			i=0;

			for(i=0;i<10;i++) // verifies the confirmation code

			{

				insignal=USART_Receive();

				if(i==9)

				{

					verification=insignal;

					insignal=USART_Receive();

					insignal=USART_Receive();
					
					if(verification==0x00)

					{

						
						return 1;
					}
					else
					{
						return 0;
					}
					
					
				}
			}
		}
	}
}


int AddFinger2() //char buffer 2 set up
{
	int i= 0;
	char insignal=1,verification=1;
	USART_Transmit(0xEF);   //packet header
	USART_Transmit(0x01);
	USART_Transmit(0xFF);   //packet adder
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0x01);	//command packet
	USART_Transmit(0x00);   //length
	USART_Transmit(0x03);

	USART_Transmit(0x01);	//Add Finger
	USART_Transmit(0x00);   //verification sum
	USART_Transmit(0x05);
	for (i=0;i<10;i++)
	{
		insignal= USART_Receive();
		if(i==9) // acknowledges after verifying the 10th Byte

		{

			verification=insignal;

			insignal=USART_Receive();

			insignal=USART_Receive();

			if(verification==0x00)

			{

				insignal=1;
				
			}
			
			

			USART_Transmit(0xEF);   //packet header
			USART_Transmit(0x01);
			USART_Transmit(0xFF);   //packet adder
			USART_Transmit(0xFF);
			USART_Transmit(0xFF);
			USART_Transmit(0xFF);
			USART_Transmit(0x01);	//command packet
			USART_Transmit(0x00);   //length
			USART_Transmit(0x04);
			
			USART_Transmit(0x02);  //
			USART_Transmit(0x02);
			USART_Transmit(0x00);  //verification sum
			USART_Transmit(0x09);

			i=0;

			for(i=0;i<10;i++)

			{

				insignal=USART_Receive();

				if(i==9) // acknowledges after verifying the 9th byte

				{

					verification=insignal;

					insignal=USART_Receive();

					insignal=USART_Receive();
					if(verification==0x00)

					{

						
						return 1;
					}
					else
					{
						return 0;
					}
					

					
				}
			}
		}
	}
}



void make_template() // creates templates from the two character buffers

{
	int i=0;
	char insignal=1,verification=1;

	insignal=1;

	USART_Transmit(0xEF);   //packet header
	USART_Transmit(0x01);
	USART_Transmit(0xFF);   //packet adder
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0x01);	//command packet
	USART_Transmit(0x00);   //length
	USART_Transmit(0x03);

	USART_Transmit(0x05);	//Make Template
	USART_Transmit(0x00);   //verification sum
	USART_Transmit(0x09);

	

	for(i=0;i<10;i++)

	{

		insignal=USART_Receive();

		if(i==9) // acknowledges the data packet

		{

			verification=insignal;

			verification=USART_Receive();

			verification=USART_Receive();

			
			
		}
	}
}


void AddfingerAuthentication() //Authenticates the added impression
{
	
	int i=0;
	char insignal=1,verification=1;
	
	USART_Transmit(0xEF);   //packet header
	USART_Transmit(0x01);
	USART_Transmit(0xFF);   //packet adder
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0x01);	//command packet
	USART_Transmit(0x00);   //length
	USART_Transmit(0x08);

	USART_Transmit(0x04);	//Search Finger
	USART_Transmit(0X01);     //Buffer ID
	USART_Transmit(0x00);   //StartPage Parameter
	USART_Transmit(0x00);
	USART_Transmit(0x00);   //PageNum Parameter
	USART_Transmit(0x0A);
	USART_Transmit(0x00);   //verification sum
	USART_Transmit(0x18);
	
	for(i=0;i<10;i++)

	{

		insignal=USART_Receive();

		if(i==9) // acknowledges the data pack

		{

			verification=insignal;

			insignal=USART_Receive(); //The acknowledge package uses 4 extra bytes
			insignal=USART_Receive();
			insignal=USART_Receive();
			insignal=USART_Receive();
			insignal=USART_Receive();
			insignal=USART_Receive();

			cleardisplay();

			if(verification==0x00) //If fingerprint template already exists

			{

				
				go_to_xy(1,1);
				LCD_print("template already exists");

			}

			else {
				go_to_xy(1,1);
				LCD_print("Finger not found hence");
				go_to_xy(1,2);
				LCD_print("Template stored");
				store();
			}
		}

	}
}

void store(void) // stores template in flash memory upon authentication
{

	int i=0,sum=14+ID;

	char insignal=1,verification=1;

	

	USART_Transmit(0xEF);   //packet header
	USART_Transmit(0x01);
	USART_Transmit(0xFF);   //packet adder
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0x01);	//command packet
	USART_Transmit(0x00);   //length
	USART_Transmit(0x06);
	USART_Transmit(0x06);
	USART_Transmit(0x01);
	USART_Transmit(0x00);
	USART_Transmit(ID);
	USART_Transmit(0x00);   //verification sum
	USART_Transmit(sum);

	

	for(i=0;i<10;i++)

	{

		insignal=USART_Receive();

		if(i==9) //acknowledges after verification

		{
			verification=insignal;
			
			insignal=USART_Receive();
			insignal=USART_Receive();

		}

	}

}
void EraseFlashMemory() //empties the flash memory
{
	
	int i = 0;
	char insignal=1,verification=1;
	USART_Transmit(0xEF);   //packet header
	USART_Transmit(0x01);
	USART_Transmit(0xFF);   //packet adder
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0xFF);
	USART_Transmit(0x01);	//command packet
	USART_Transmit(0x00);   //length
	USART_Transmit(0x03);

	USART_Transmit(0x0D);   //Empty Finger Library
	USART_Transmit(0x00);   //verification sum
	USART_Transmit(0x11);
	
	for(i=0;i<10;i++)

	{

		insignal=USART_Receive();

		if(i==9) //acknowledges after verification

		{

			verification=insignal;

			insignal=USART_Receive();

			insignal=USART_Receive();

			

		}

	}
	go_to_xy(1,1);
	LCD_print("All templates");
	go_to_xy(1,2);
	LCD_print("removed");
}


//main function
int main(void)
{
	        
	_delay_ms(500);		//Initializes the LCD
	LCD_Initialise();
	_delay_ms(100);		//Initializes the USART
	USART_Init();
	
	sei(); // enables global interrupt
	go_to_xy(1,1);
	LCD_print("  Biometric  ");
	go_to_xy(1,2);
	LCD_print(" Authentication System ");
	_delay_ms(5000);
	cleardisplay();
	external_interrupts_init();	// enables all external interrupts as defined

	while(1) // RUN TIME RE-CONFIGURABLE
	{
		
	}
	return 0;

}
void external_interrupts_init(void)
{
	PORTD= (1<<2) | (1<<3); // pull-up activated
	MCUCR= 0x00; // make int0 and int1 low level triggered
	GICR= (1<<INT0) | (1<<INT1);
	
}
ISR (INT0_vect)
{

	AddFinger();
	
}
ISR (INT1_vect)
{
	
	EraseFlashMemory();
}







